func reverse(x int) int {
    if x == 0 {
        return 0
    }
    
    if x - int(int32(x)) > 0 {
        return 0
    }
    
    var Flag int
    
    if x > 0 {
        Flag = 1
    } else if x < 0 {
        Flag = -1
        x = -1 * x
    }
    
    nums := make ([]int, 0)
    
    for i := 0; i < 10; i++{
        tenToPow := math.Pow10(i)
        rmdr := x % int(int32(tenToPow))
        
        rmdrFirst := x / int(int32(tenToPow)) % 10

        if rmdr == x {
            break
        } else {
            nums = append(nums, rmdrFirst)
        }
    }
    
    var rslt int
    for j := 0; j < len(nums); j++{
	    tenToPow := math.Pow10(len(nums) - j -1 )
        rslt = rslt + nums[j] * int(int32(tenToPow))
    }

    if rslt - int(int32(rslt)) > 0 {
        return 0
    }
    rslt = Flag * rslt
    return rslt
}
